/* The first section of a bison file contains:
 *    1. A code section for includes and other arbitrary C code. Copied to the parser verbatim
 *    2. Definition of the yylval union
 *    3. Definition of the tokens
 *    4. Precedence directives
 *    5. The start token
 *    6. Parser options
 */

/* Code section */
%{
#include <stdio.h>
#include <stdlib.h>

// Reference to the line number generated by the scanner
extern int yylineno;
// Reference to the yylex function to quiet a compiler warning
int yylex();

// The yyerror function is called on any syntax error. When using %error-verbose, this function
// takes a single argument (a string) which contains a detailed explanation of the error.
// Otherwise it takes no arguments and it is up to the user to format the error using a minimal
// description provided in yytext.
void yyerror(const char *s) {
	fprintf(stderr, "Error: (line %d) %s\n", yylineno, s);
	exit(1);
}
%}

%union {
	int intval;
	float floatval;
	char *stringval;
	char *identifier;
}

%token tUMINUS
%token tUNEGATE
%token tCOLON tSEMICOLON tPLUS tMINUS tMULTIPLY tDIVIDE;
%token tLEFTPAREN;
%token tRIGHTPAREN;
%token  tRIGHTBRACE;
%token  tLEFTBRACE;
%token  tASSIGN;
%token  tNEGATE;
%token  tEQUALS;
%token  tNOTEQUALS;
%token  tGREATEREQUALS;
%token  tLESSEQUALS;
%token  tGREATER;
%token  tLESS;
%token  tAND;
%token  tOR;
%token  tVAR;
%token  tFLOAT;
%token  tINT;
%token  tSTRING;
%token  tBOOLEAN;
%token  tIF;
%token  tELSE;
%token  tWHILE;
%token  tREAD;
%token  tPRINT;
%token  tTRUE;
%token  tFALSE;
%token <intval> tINTVAL
%token <floatval> tFLOATVAL
%token <stringval> tSTRINGVAL
%token <identifier> tIDENTIFIER 

%left tPLUS tMINUS
%left tMULTIPLY tDIVIDE
%left tUMINUS tUNEGATE

/* Start token (by default if this is missing it takes the first production */
%start exp

/* Generate the yylloc structure used for storing line numbers with tokens */
%locations
/* Generate detailed error messages */
%error-verbose

%% 

program: dcls | stmts ;
dcls: %empty | dcl dcls ;
stmts: %empty | stmt stmts
dcl: tVAR tIDENTIFIER tCOLON type tASSIGN exp tSEMICOLON |
	tVAR tIDENTIFIER tCOLON type tSEMICOLON ;
type: tINT | tFLOAT | tSTRING | tBOOLEAN ;
stmt: tREAD tLEFTPAREN tVAR tRIGHTPAREN tSEMICOLON |
	tPRINT tLEFTPAREN exp tRIGHTPAREN tSEMICOLON |
	tVAR tASSIGN exp tSEMICOLON |
	tWHILE tLEFTPAREN exp tRIGHTPAREN tLEFTBRACE stmts tLEFTBRACE |
	ifstmt ;
ifstmt: tIF tLEFTPAREN exp tRIGHTPAREN tLEFTBRACE stmts tRIGHTBRACE elifstmts elsestmt
elsestmt: %empty | tELSE tLEFTBRACE stmts tRIGHTBRACE
elifstmts: %empty | elifstmt elifstmts 
elifstmt: tELSE tIF tLEFTPAREN exp tRIGHTPAREN tRIGHTBRACE stmts tLEFTBRACE 
exp: tIDENTIFIER |
	tINTVAL | tFLOATVAL | tSTRINGVAL | tTRUE | tFALSE |
	tMINUS exp %prec tUMINUS | tNEGATE exp %prec tUNEGATE |
	exp tMULTIPLY exp | exp tDIVIDE exp | exp tPLUS exp | exp tMINUS exp |
	tLEFTPAREN exp tRIGHTPAREN |
	exp tGREATEREQUALS exp | exp tLESSEQUALS exp | exp tGREATER exp | exp tLESS exp |
	exp tEQUALS exp | exp tNOTEQUALS exp |
	exp tAND exp | exp tOR exp 


%%

